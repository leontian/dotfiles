" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes
" git
"Plug 'tpope/vim-git'
"Plug 'tpope/vim-fugitive'
" gitgutter: show git diff in file, ]c [c to move around changed parts
"Plug 'airblade/vim-gitgutter'

" commenting
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'

" cpp
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'vim-scripts/ctags.vim'
Plug 'vim-scripts/AutoComplPop'
Plug 'vim-scripts/omnicppcomplete'
Plug 'fholgado/minibufexpl.vim'

" git
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

" bracket
Plug 'tpope/vim-unimpaired'

" Fuzzy file opener
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }

" good looking
Plug 'sonph/onehalf', {'rtp': 'vim/'}


Plug 'luochen1990/rainbow'

" Fancy statusline
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Take notes and keep todo lists in vim
Plug 'vimwiki/vimwiki'
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'

" On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }

Plug 'rust-lang/rust.vim'
Plug 'simrat39/rust-tools.nvim'
" Collection of common configurations for the Nvim LSP client
Plug 'neovim/nvim-lspconfig'

" Use release branch (recommend)
Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" Initialize plugin system
call plug#end()

" vimwiki
let g:vimwiki_list = [{'path': '~/git/md/', 'path_html': '~/git/html/', 'ext': '.md', 'syntax': 'markdown'}]
auto FileType vimwiki nmap <leader>tl <Plug>VimwikiToggleListItem
auto FileType vimwiki vmap <leader>tl <Plug>VimwikiToggleListItem
" let g:vimwiki_listsyms = '✗○◐●✓'

"Non-Plugin Stuff

" colorscheme
colorscheme onehalfdark
let g:airline_theme='onehalfdark'

" Enable syntax highlighting
syntax on

let g:cpp_class_scope_highlight=1           " highlight class scope
" let g:cpp_member_variable_highlight=1       " highlight member variables
let g:cpp_experimental_template_highlight=0 " highlighting of template functions(experimental)
" tab settings
set tabstop=4
set expandtab
set softtabstop=4

" set autoindent
set ruler
set number
" set relativenumber
set cursorline
set hlsearch
set ic

set laststatus=2

" make backspace work
set backspace=indent,eol,start

set tags=./TAGS;

" cscope settings

if has('cscope')
  set cscopetag cscopeverbose

  if has('quickfix')
    set cscopequickfix=s-,c-,d-,i-,t-,e-
  endif

  cnoreabbrev csa cs add
  cnoreabbrev csf cs find f
  cnoreabbrev csk cs kill
  cnoreabbrev csr cs reset
  cnoreabbrev css cs show
  cnoreabbrev csh cs help

  " command -nargs=0 Cscope cs add ~/cscope/cscope.out
endif
let g:solarized_bold = 1


" close preview window after a completion - omnicppcomplete
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

let g:miniBufExplUseSingleClick = 1
let g:miniBufExplStatusLineText = ""

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlPBuffer'
let  g:gitgutter_max_signs = 10000


" rainbow
let g:rainbow_active = 1

let g:rainbow_conf = {
\	'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
\	'ctermfgs': ['darkblue', 'darkgreen','red', 'darkcyan', 'darkmagenta'],
\	'operators': '_,_',
\	'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
\	'separately': {
\		'*': {},
\		'tex': {
\			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
\		},
\		'lisp': {
\			'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
\		},
\		'vim': {
\			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
\		},
\		'html': {
\			'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
\		},
\		'css': 0,
\	}
\}
map <F2> :copen<CR>
map <F5> :cn<CR>
map <F6> :cp<CR>

" Set completeopt to have a better completion experience
" :help completeopt
" menuone: popup even when there's only one match
" noinsert: Do not insert text until a selection is made
" noselect: Do not select, force user to select one from the menu
set completeopt=menuone,noinsert,noselect

" Avoid showing extra messages when using completion
set shortmess+=c


" coc.vim configurations
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1):
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Find files using Telescope command-line sugar.
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>
nnoremap <leader>fz <cmd>FZF<cr>


" CocInstall coc-go
let g:go_list_type = "quickfix"
"disable vim-go gopls integration, use coc-go instead
let g:go_gopls_enabled = 0
let g:go_def_mapping_enabled = 0
